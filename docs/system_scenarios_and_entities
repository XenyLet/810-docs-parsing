Сущности системы
===================
1. Задача на обработку - сущность для передачи вводных данных по распознаванию текста в отдельно взятом документе. Описывается в формате JSON, облдает следующими параметрами:
- task_id:   уникальный номер задачи. Int64, Генерируется простым инкрементом
- file_name: имя файла для распознавания. Строка для поиска файла в ФС (полный путь)

При сохранении в БД записывается timestamp взятия в работу

Пример:
{
	task_id:   57092,
	file_name: "/data/reports/docs/ИБПА.325321.СВЫ666.pdf"
}

2. Статус задачи на разработку - сущность для передачи прогресса по распознаванию текста в документе. 
Включает в себя:
- task_id
- status - строка состояние задачи (in_progress, success, error)
- message - строка с информационным сообщением (описания ошибки и т.д)
- data - JSON, в котором содержится результат распознавания текста (список строк в элементе elements_list)

Примеры: 
{
	task_id: 57092,
	status: "in_progress",
	message: "",
	data: null
}
{
	task_id: 57092,
	status: "success",
	message: "",
	data: {
		recognition_results: [
			{
				res: "Р1-5В сумкуму суц50%",
				conf: 0.83
			}
		]
	}
}
{
	task_id: 57092,
	status: "error",
	message: "FileNotFound ...",
	data: null
}

Описание сценариев в системе
====================================
0. Инициализация

	0. Вычитывается конфигурационный файл, указанный при запуске программы
	1. Запускается вэб-интерфейс
	2. Запускается соединение с БД
	3. Создается пустая очередь задаяч для процессов Recognizer
	4. Manager по-умолчанию создает один/несколько процесс Recognizer

1. Запуск после аварийного завершения работы/приостановки

	1. Если в БД были задачи со статусом in_progress, сбросить статус в to_do
	
	далее - сценарий 3

2. Постановка директории на обработку

	1. Пользователь передает директорию на обработку через Web-интерфейс
	2. Manager сканирует директорию на наличие pdf файлов и наличие прав на чтение
		- если сканирование удалось
			- проверяет, существуют ли задачи с таким же именем файла. 
				- Если существуют в статусе canceled или error, сбросить в to_do. Из in_progress или success не сбрасывать
				- Если не существуют
				- формирует задачи (создает соответствие task_id-имя файла), 
				- записывает их в БД со статусом "to_do"
			- уведомляет пользователя об успехе	
		- если возникли проблемы с некоторыми файлами
			- уведомляет пользователя

	далее сценарий 3

3. Рабочий режим
	1. Вычитать из БД N задач со статусом to_do, где N = кол-во процессов Recognizer * 5 (для уменьшения кол-ва запросов на чтения к БД)
	2. Добавить вычитанные задачи в очередь на обработку
	3. При получении обновлений статуса задачи до:
		- in_progress - обновить статус в БД. Добавить задачу в список на отслеживания ttl
		- success 
			- обновить статус в БД, 
			- удалить задачу из списка на отслживание ttl 
			- проверить размер очереди сообщений. Если нужно, дочитать еще из БД
			- начать сценарий "обработка результата распознавания"
		- error 
			- обновить статус в БД, 
			- удалить задачу из списка на отслживание ttl
			- проверить размер очереди сообщений. Если нужно, дочитать еще из БД
			- уведомить пользователя
	4. При окончании очереди сообщений и пустом списке на отслеживание ttl
		- уведомить пользователя о завершении работы


4. Перезапуск задачи
	1. Сбросить статус задачи в to_do

5. Удаление задачи
	1. Перевести в статус canceled

6. Обработка результата распознавания
	0. Создатьв БД сущность списка элементов
	1. Создать в БД сущность документа. Доджны быть
		- имя
		- ID перечня элементов (FK отдельной таблицы)
	2. Для каждого найденного элемента	
		1. С использованием регулярных выражений выделить из элемента части, отвечающие за
			- тип элемента
			- номинал эл-та
			- доп. характеристики
		2. Confidence > THRESHOLD:
			- Да -> к п.3
			- Нет - сценарий №7 (Ручное распознавание)
		2. С использованием файлов .duplicates составить регулярное выражение для поиска элемента в БД по типу
		3. Отправить запрос в БД на поиск эл-та
			- Если нашелся, то добавить эл-т в перечень элементов
			- Если не нашелся, отправить пользователю для распознавания вручную (сценарий №7)

7. Ручное распознавание элемента
	0. Пользователь видит изображение элемента
	1. Пользователь заполняет разделы об этом элементе
		- тип
		- номинал
		- ...
	2. По нажатию кнопки элемент записывается в бд, в перечень элементов, соответствующий документу

* необходимо реализовать очередь из задач для пользователя: ID задачи (надо ли?) - ID документа


Требования к компонентам системы
======================================
Компонент управления (manager) должен:
1. Иметь возможность принимать на вход (и исполнять) управляющие команды 
	- постановка директории на обработку
	- приостановка/запуск обработки
	- добавление/удаление процессов recognizer 
	- перезапуск/удаление задач на обработку документов, которые завершились с ошибкой
2. Выдавать по запросу статистику:
	- % выполненных задач, кол-во задач по статусам
	- общее кол-во документов
	- примерное время завершения существующих задач
3. Уведомлять пользователя о:
	 необходимости вручную распознать текст на изображении
	(посредством web интерфейса)
4. Предоставлять пользователю возможность вручную распознать спорный текст
5. Управлять наполнением очереди задач на распознавание
6. Выполнять постобработку результатов распознавания

Взаимодействие с пользователем осуществлять через Web-интерфейс

Целесообазно выделить процесс работы с очередью задач и списком на проверку ttl в отдельный модуль/класс
---------------------------------------------------

Компонент распознавания (recognizer) должен:
1. принимать на вход задачу в формате JSON
2. на выход отдавать список структур, в которых будут связаны
	- распознанный текст
	- шрифт, которым текст написан (для последующего определения возможных "визуальных дубликатов")
	- confidance для распознанного текста

